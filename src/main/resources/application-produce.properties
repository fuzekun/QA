
######################## 应用信息 ###################
server.port=8080
server.servlet.context-path=


#ThymeleafProperties从里面看thymeleaf的相关配置信息
####################### thymeleaf ####################
spring.thymeleaf.cache=true
#thymeleaf start
#spring.thymeleaf.mode=HTML5
#spring.thymeleaf.encoding=UTF-8
#spring.thymeleaf.content-type=text/html
#spring.thymeleaf.prefix = classpath:/templates
#spring.thymeleaf.suffix = .html
#spring.mvc.static-path-pattern=/** static 文件夹下的静态文件访问路径


############单数据源配置#####################
## 数据源从DataSourceProperties里面找
#spring.datasource.url=jdbc:mysql://47.97.112.139:3306/bookstore2
#spring.datasource.username=root
#spring.datasource.password=1230
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.jpa.database-platform = org.hibernate.dialect.MySQL5Dialect
#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto = update


################### 第一个数据源配置#######################33
## 这个在低版本里面，时域需要加上
#spring.datasource.jdbc-url=jdbc:mysql://47.97.112.139:3306/bookStore2?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
#spring.datasource.username=root
#spring.datasource.password=1230
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#
#################### 第二个数据源配置(本地的test库)########################
#spring.second-datasource.jdbc-url=jdbc:mysql://47.97.112.139:3306/test?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
#spring.second-datasource.username=mysql
#spring.second-datasource.password=1230
#spring.second-datasource.driver-class-name=com.mysql.cj.jdbc.Driver


#################### 第三个数据源(牛客社区)配置########################
# 时域需要加上，别弄错了数据库。
spring.community-datasource.jdbc-url=jdbc:mysql://localhost:3306/community?useUnicode=true&characterEncoding=utf8&useSSL=true&serverTimezone=UTC
spring.community-datasource.username=root
spring.community-datasource.password=1230
spring.community-datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# 配置mybatis的信息,相当于configuration的作用
# 1. 数据源的相关信息
# 2. 从哪找到相关的.xml文件
# 3. 实体类从那个包下面，如果写上之后，就不用写全类名了

# 设置mybatis寻找对应.xml文件的位置
#mybatis.mapper-locations=classpath:mapper/*.xml
# 配置实体类，不用写全类名
#mybatis.type-aliases-package=com.fuzekun.demo1.entity
# 使用自增id
#mybatis.configuration.use-generated-keys=true
# 配置驼峰命名
#mybatis.configuration.map-underscore-to-camel-case=true
# 设置mapper文件层执行sql时日志输出级别
#logging.level.com.example.mybatis.mapper=debug

## 可以直接使用配置文件进行配置,前提是里面不包含数据源的配置信息
#mybatis.config-location=classpath:mybatis_conf.xml
#mybatis.mapper-locations=classpath:mapper/*.xml

################## 日志的配置 ####################
#logging.level.com.fuzekun.demo1=warn
# 希望打印SQL语句
#logging.level.com.fuzekun.demo1.Demo1Application=debug
# 从配置文件中写了，所以没有必要了,再写会被覆盖
#logging.file.name=d:/data/logger/logger.log
logging.level.root=INFO



################ 邮箱配置####################
spring.mail.host=smtp.163.com
spring.mail.username=17861401461@163.com
spring.mail.password=15254758955fzk!
spring.mail.default-encoding=UTF-8
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true 
spring.mail.properties.mail.smtp.socketFactoryClass=javax.net.ssl.SSLSocketFactory
spring.mail.properties.mail.debug=true 

#
## ####################################
## redis
######################################
##spring.redis.host = 140.143.23.94
#spring.redis.password = 1230
##spring.redis.port = 6379
## 连接超时时间 单位 ms（毫秒）
#spring.redis.timeout = 2000
#spring.redis.cluster.nodes = node0:6970
## 连接池中的最大空闲连接，默认值也是8
#spring.redis.pool.max-idle = 8
## 连接池中的最小空闲连接，默认值也是0
#spring.redis.pool.min-idle = 0
## 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。
#spring.redis.pool.max-active = 8
## 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出
#spring.redis.pool.max-wait = -1


################### 配置一些其他信息#########################

# community, 端口默认是80
community.path.domain=http:/47.97.112.139
community.path.upload=/root/data/community/header
#community.path.upload=d:/data/images
#community.path.domain=47.97.112.139:8080




################## kafka的配置 #########################
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=community-consumer-group
# 自动提交
spring.kafka.consumer.enable-auto-commit=true
# 自动提交的频率
spring.kafka.consumer.auto-commit-interval=3000


################# elasticsearch #####################
## 9200 Http端口， 9300 是tcp端口
spring.data.elasticsearch.cluster-name=nowcoder
spring.data.elasticsearch.cluster-nodes=localhost:9300
spring.elasticsearch.rest.uris=http://localhost:9200

spring.main.allow-bean-definition-overriding=true


############ spring thread-pool #####################
# 最多容纳115个task,
spring.task.execution.pool.core-size=5
spring.task.execution.pool.max-size=15
spring.task.execution.pool.queue-capacity=100


######### 定时任务线程的线程池 ##################
# 定时启动，可以预判有几个任务，服务器一旦启动就可以确定了
spring.task.scheduling.pool.size=5



############# QuartzProperties ###########################
spring.quartz.job-store-type=jdbc
spring.quartz.scheduler-name=communityScheduler
spring.quartz.properties.org.quartz.scheduler.instanceId=AUTO
spring.quartz.properties.org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
spring.quartz.properties.org.quartz.jobStore.isClustered=false
spring.quartz.properties.org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
spring.quartz.properties.org.quartz.threadPool.threadCount=5


############### wk ##########################
wk.image.storage=/root/data/community/wk-images
wk.image.cmd=/usr/local/bin/wkhtmltoimage

########## qiniu ###########################
# 密钥与空间
qiniu.key.access=6uy_pxwy3BFZmUmWPfvao0VQqMsIPJbMJbRi05AC
qiniu.key.secret=B05s1X1K2f6uN-gYp9RoLXna6A2ot88YUh7-Tu7V
qiniu.bucket.name=fzkpicgo
qiniu.bucket.url=http://fuzekun.top



############## caffeine ####################
caffeine.posts.max-size=20
caffeine.posts.expire-seconds=180

############## actuator ###################
management.endpoints.web.exposure.include=*
management.endpoints.web.exposure.exclude=info,caches
